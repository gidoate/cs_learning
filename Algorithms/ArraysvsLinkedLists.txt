// ARRAY VS LINKED LISTS

Arrays advantage
    1. It's easy (fast) to access (read/write) any random (at any random index) you're interested at
    2. Allow RANDOM and SEQUENTIAL access 
Arrays disadvantage:
    1. They require the memory space for all of the items
    2. It's difficult to make them bigger without moving the array to a different memory location (slow operations)
    3. There might be available memory for all the items, but not cosecutively, what stops you from being able to 
       store the disadvantage
    4. Slower to insert or delete one element

Linked list advantage:
    1. It's easy to include a new element to the list
    2. Can make full use of the memory, even though there might not be all the address one after the other
    3. Faster to insert or delete one element
Linked list disadvantage
    1. It's difficult (slow) to access any random element of the list, because you'll need to 
       follow the list through each element until finding the one you're looking for
    2. Allow only for SEQUENTIAL access

In terms of BIG O:
            ARRAYS  | LISTS
Reading     O(1)    | O(n)
Insertion   O(n)    | O(1)
Deletion    O(n)    | O(1)

//////////------------------------------------------------------------------------------------////////// 
Combinations of both type of data structures are possible and might be a good solution in certain cases
where reading and adding data is requied
//////////------------------------------------------------------------------------------------////////// 

