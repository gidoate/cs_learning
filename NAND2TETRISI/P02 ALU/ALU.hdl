// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //INPUTS INITIAL MANIPULATION
    //TASK 1 - Make x all zeros
    //Steps to make all zeros:
    // 1. Negate the number 2. Then add to original 3. Then negate output
        //Negation of x
        Not16(in=x, out=xNot );
        //Add to original
        Add16(a=x, b=xNot, out=xallones );
        //Negation of addition
        Not16(in=xallones, out=xallzeros );
    //TASK 2 - Select between x and xallzeros
        Mux16(a=x , b=xallzeros , sel=zx , out=xzx );
    //TASK 3 - Negate xzx
        Not16(in=xzx, out=xnx);
    //TASK 4 - Select between xzx and xnx
        Mux16(a=xzx , b=xnx , sel=nx , out=xfinal );
    //TASK 5 - Make y all zeros (same steps as for x)
        Not16(in=y , out=yNot );
        Add16(a=y, b=yNot, out=yallones );
        Not16(in=yallones, out=yallzeros );
    //TASK 6 - Select between y and yallzeros
        Mux16(a=y , b=yallzeros , sel=zy , out=yzy ); 
    //TASK 7 - Negate yzy
        Not16(in=yzy , out=yny );
    //TASK 8 - Select between yzy and yny
        Mux16(a=yzy , b=yny , sel=ny , out=yfinal );

    //ADDITION OR BITWISE AND OF X AND Y
    //TASK 1 - Addition of xfinal and y final
        Add16(a=xfinal, b=yfinal , out =xyfinalAdd );
    //TASK 2 - Bitwise and of x and y
        And16(a=xfinal , b=yfinal , out=xyfinalAnd );
    //TASK 3 - Selection between ADDITION or BITWISE AND
        Mux16(a=xyfinalAnd , b=xyfinalAdd , sel=f , out=outtemp );

    //NEGATION OR NO-NEGATION OF OUTTEMP
    //TASK 1 - Calculate negation of outtemp
        Not16(in=outtemp , out=notouttemp );
    //TASK 2 - Selection between negation or no-negation (ALU final output)
        //After out - include three new 8-bit variables named msb, ls8b and ms8b
        //msb - most significant bit (bit [15] of out[16])
        //ls8b - array with least significant 8-bits (bits [0..7] of out[16])
        //ms8b - array with most significant 8-bits (bits [8..15] of out[16])
        Mux16(a=outtemp , b=notouttemp , sel=no , out=out, out[15]=msb, out[0..7]=ls8b, out[8..15]=ms8b );
    
    //ADDITIONAL OUTPUTS CALCULATION (ZR AND NG)
    //TASK 1 - Calculation of zr
        //Use of Or8Way to evaluate if all 0 is true in ls8b and ms8b
        Or8Way(in=ls8b , out=ls8bnot0 );
        Or8Way(in=ms8b , out=ms8bnot0 );
        Or(a=ls8bnot0 , b=ms8bnot0 , out=zrtemp );
        Not(in=zrtemp , out=zr );
    //TASK 2 - calcuation of ng
        //Assuming that 2's complement system is used:
        //a number is negative when the msb is 1
        //Rationale for implementation:
            //If msb is one, out will be one when AND with itself
            //If msb is zero, out will be zero when AND with itself
        And(a=msb , b=msb , out=ng );    
    
    //// Replace this comment with your code.
}